// Generated by CoffeeScript 1.8.0
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty;

  (function() {
    'use strict';

    /*
    	name: Angular Classy
    	version: 0.4.2
    	author: Dave Jeffery, @DaveJ
    	additions:
    		version: 1.1.1
    		author: Vitaliy Tarash, @Pulse
    		additions: [
    			'injectToScope ability for classy controllers'
    			'ability to specify common injections to controller and to scope'
    			'ability to inject nested properties of initial dependencies'
    			'tryApply in each controller with scope'
    		]
    	License: MIT
     */

    /* global angular */
    '"/../';
    var classFns, defaults, origMethod, scopeDepsObj;
    defaults = {
      controller: {
        addFnsToScope: true,
        watchObject: true,
        _scopeName: '$scope',
        _scopeShortcut: true,
        _scopeShortcutName: '$',
        _watchKeywords: {
          objectEquality: ['{object}', '{deep}'],
          collection: ['{collection}', '{shallow}'],
          group: ['{group}']
        },
        _defaultProperties: ['constructor', 'init', 'watch', 'listen']
      }
    };
    origMethod = angular.module;
    angular.module = function(name, reqs, configFn) {

      /*
      		 * We have to monkey-patch the `angular.module` method to see if 'classy' has been specified
      		 * as a requirement. We also need the module name to we can register our classy controllers.
      		 * Unfortunately there doesn't seem to be a more pretty/pluggable way to this.
       */
      var module;
      module = origMethod(name, reqs, configFn);
      if (reqs && __indexOf.call(reqs, 'classy') >= 0) {
        module.classy = {
          configure: function(config) {
            return _.extend(module.classy.options, config);
          },
          options: {
            controller: {},
            commonInjections: ['$scope'],
            commonInjectionsToScope: []
          },
          controller: function(classObj) {
            var ClassyController, c, key, value;
            classObj.__options = angular.extend({}, defaults.controller, module.classy.options.controller, classObj.__options);
            c = ClassyController = (function() {
              ClassyController.prototype.__options = classObj.__options;

              classFns.create(module, classObj, ClassyController);

              function ClassyController() {
                classFns.construct(this, arguments);
              }

              return ClassyController;

            })();
            for (key in classObj) {
              if (!__hasProp.call(classObj, key)) continue;
              value = classObj[key];
              c.prototype[key] = value;
            }
            return c;
          }
        };
        module.cC = module.ClassyController = module.classy.controller;
      }
      return module;
    };
    angular.module('classy', []);
    scopeDepsObj = {};
    return classFns = {
      selectorControllerCount: 0,
      construct: function(parent, args) {
        var options;
        options = parent.constructor.prototype.__options;
        this.bindDependencies(parent, args);
        if (options.addFnsToScope) {
          this.addFnsToScopeAndSetWatchers(parent);
          if (scopeDepsObj[parent.name] != null) {
            this.injectScopeDepsAndSetWatchers(parent, scopeDepsObj[parent.name]);
          }
        }
        this.addTryApply(parent);
        if (typeof parent.init === "function") {
          parent.init();
        }
        if (options.watchObject && angular.isObject(parent.watch)) {
          this.registerWatchers(parent);
        }
        if (angular.isObject(parent.listen)) {
          return this.registerListeners(parent);
        }
      },
      addTryApply: function(parent) {
        var $scope;
        $scope = parent[parent.constructor.prototype.__options._scopeName];
        if ($scope != null) {
          return parent.tryApply = function(fn) {
            if ($scope.$$phase) {
              return fn();
            } else {
              return $scope.$apply(fn);
            }
          };
        }
      },
      addFnsToScopeAndSetWatchers: function(parent) {
        var $scope, fn, key, prop, _ref, _results;
        $scope = parent[parent.constructor.prototype.__options._scopeName];
        _ref = parent.constructor.prototype;
        for (key in _ref) {
          fn = _ref[key];
          if (!angular.isFunction(fn)) {
            continue;
          }
          if (__indexOf.call(defaults.controller._defaultProperties, key) >= 0) {
            continue;
          }
          parent[key] = angular.bind(parent, fn);
          if (key[0] !== '_') {
            $scope[key] = parent[key];
          }
        }
        _results = [];
        for (key in parent) {
          prop = parent[key];
          _results.push((function(key, prop) {
            if (prop != null ? prop.watchItByClassy : void 0) {
              $scope["" + key + "_fn"] = prop.fn;
              return $scope.$watch("" + key + "_fn()", function(value) {
                return parent[key] = value;
              });
            }
          })(key, prop));
        }
        return _results;
      },
      __isCompositeDep: function(key) {
        return key.indexOf('.') > -1;
      },
      __calcCompositeDepName: function(key, deps) {
        var d, existSameLast, last, tokens, _i, _len;
        tokens = key.split('.');
        last = _.last(tokens);
        existSameLast = false;
        for (_i = 0, _len = deps.length; _i < _len; _i++) {
          d = deps[_i];
          if (_.last(d.split('.')) === last && d !== key) {
            existSameLast = true;
          }
        }
        if (existSameLast || __indexOf.call(deps, last) >= 0) {
          return key.replace(/\./g, '_');
        } else {
          return last;
        }
      },
      injectScopeDepsAndSetWatchers: function(parent, scopeDeps) {
        var $scope, key, name, t, tokens, value, _i, _j, _len, _len1, _ref, _results;
        $scope = parent[parent.constructor.prototype.__options._scopeName];
        _results = [];
        for (_i = 0, _len = scopeDeps.length; _i < _len; _i++) {
          key = scopeDeps[_i];
          if (classFns.__isCompositeDep(key)) {
            tokens = key.split('.');
            value = parent;
            for (_j = 0, _len1 = tokens.length; _j < _len1; _j++) {
              t = tokens[_j];
              value = value[t];
            }
            name = classFns.__calcCompositeDepName(key, scopeDeps);
            parent[name] = value;
            _results.push($scope[name] = value);
          } else {
            if (((_ref = parent[key]) != null ? _ref.watchItByClassy : void 0) != null) {
              _results.push((function(key) {
                $scope["" + key + "_fn"] = parent[key].fn;
                return $scope.$watch("" + key + "_fn()", function(value) {
                  return $scope[key] = value;
                });
              })(key));
            } else {
              _results.push($scope[key] = parent[key]);
            }
          }
        }
        return _results;
      },
      bindDependencies: function(parent, args) {
        var i, injectName, injectObject, injectObjectMode, key, options, _i, _len, _ref, _results;
        injectObject = parent.__ClassyControllerInjectObject;
        injectObjectMode = !!injectObject;
        options = parent.constructor.prototype.__options;
        _ref = parent.constructor.$inject;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          key = _ref[i];
          if (injectObjectMode && (injectName = injectObject[key]) && injectName !== '.') {
            _results.push(parent[injectName] = args[i]);
          } else {
            parent[key] = args[i];
            if (key === options._scopeName && options._scopeShortcut) {
              _results.push(parent[options._scopeShortcutName] = parent[key]);
            } else {
              _results.push(void 0);
            }
          }
        }
        return _results;
      },
      registerListeners: function(parent) {
        var $scope, eventName, listener, _ref, _results;
        $scope = parent[parent.constructor.prototype.__options._scopeName];
        _ref = parent.listen;
        _results = [];
        for (eventName in _ref) {
          listener = _ref[eventName];
          _results.push($scope.$on(eventName, angular.bind(parent, listener)));
        }
        return _results;
      },
      registerWatchers: function(parent) {
        var $scope, expression, fn, keyword, watchKeywords, watchRegistered, watchType, watchTypes, _i, _len, _ref, _ref1, _results;
        $scope = parent[parent.constructor.prototype.__options._scopeName];
        if (!$scope) {
          throw new Error("You need to inject `$scope` to use the watch object");
        }
        watchKeywords = parent.constructor.prototype.__options._watchKeywords;
        watchTypes = {
          normal: {
            keywords: [],
            fnCall: function(parent, expression, fn) {
              return $scope.$watch(expression, angular.bind(parent, fn));
            }
          },
          objectEquality: {
            keywords: watchKeywords.objectEquality,
            fnCall: function(parent, expression, fn) {
              return $scope.$watch(expression, angular.bind(parent, fn), true);
            }
          },
          collection: {
            keywords: watchKeywords.collection,
            fnCall: function(parent, expression, fn) {
              return $scope.$watchCollection(expression, angular.bind(parent, fn));
            }
          },
          group: {
            keywords: watchKeywords.group,
            fnCall: function(parent, expression, fn) {
              return $scope.$watchGroup(expression.split(','), angular.bind(parent, fn));
            }
          }
        };
        _ref = parent.watch;
        _results = [];
        for (expression in _ref) {
          fn = _ref[expression];
          if (angular.isString(fn)) {
            fn = parent[fn];
          }
          if (angular.isString(expression) && angular.isFunction(fn)) {
            watchRegistered = false;
            for (watchType in watchTypes) {
              if (watchRegistered) {
                break;
              }
              _ref1 = watchTypes[watchType].keywords;
              for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                keyword = _ref1[_i];
                if (watchRegistered) {
                  break;
                }
                if (expression.indexOf(keyword) !== -1) {
                  watchTypes[watchType].fnCall(parent, expression.replace(keyword, ''), fn);
                  watchRegistered = true;
                }
              }
            }
            if (!watchRegistered) {
              _results.push(watchTypes.normal.fnCall(parent, expression, fn));
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      },
      inject: function(parent, deps, scopeDeps) {
        var injectObject, name, scopeName, service;
        if (angular.isObject(deps[0])) {
          parent.prototype.__ClassyControllerInjectObject = injectObject = deps[0];
          deps = (function() {
            var _results;
            _results = [];
            for (service in injectObject) {
              name = injectObject[service];
              _results.push(service);
            }
            return _results;
          })();
          scopeName = parent.prototype.__options._scopeName;
          if ((injectObject != null ? injectObject[scopeName] : void 0) && injectObject[scopeName] !== '.') {
            parent.prototype.__options._scopeName = injectObject[scopeName];
          }
        }
        parent.$inject = deps;
        if ((scopeDeps != null) && angular.isArray(scopeDeps)) {
          return parent.$inject = parent.$inject.concat(scopeDeps);
        }
      },
      registerSelector: function(appInstance, selector, parent) {
        var controllerName, el, els, _i, _len, _results;
        this.selectorControllerCount++;
        controllerName = "ClassySelector" + this.selectorControllerCount + "Controller";
        appInstance.controller(controllerName, parent);
        if (angular.isElement(selector)) {
          selector.setAttribute('data-ng-controller', controllerName);
          return;
        }
        if (angular.isString(selector)) {
          els = (typeof window.jQuery === "function" ? window.jQuery(selector) : void 0) || document.querySelectorAll(selector);
        } else if (angular.isArray(selector)) {
          els = selector;
        } else {
          return;
        }
        _results = [];
        for (_i = 0, _len = els.length; _i < _len; _i++) {
          el = els[_i];
          if (angular.isElement(el)) {
            _results.push(el.setAttribute('data-ng-controller', controllerName));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      },
      create: function(appInstance, classObj, parent) {
        var deps, k, scopeDeps, scopeDeps_injectable, v;
        if (classObj.el || classObj.selector) {
          this.registerSelector(appInstance, classObj.el || classObj.selector, parent);
        }
        if (angular.isString(classObj.name)) {
          appInstance.controller(classObj.name, parent);
        }
        deps = classObj.inject || [];
        deps = appInstance.classy.options.commonInjections.concat(deps);
        scopeDeps = classObj.injectToScope || [];
        scopeDeps = appInstance.classy.options.commonInjectionsToScope.concat(scopeDeps);
        scopeDeps_injectable = _.object(scopeDeps, scopeDeps);
        for (k in scopeDeps_injectable) {
          v = scopeDeps_injectable[k];
          if (classFns.__isCompositeDep(v)) {
            scopeDeps_injectable[k] = _.first(v.split('.'));
          }
        }
        scopeDepsObj[classObj.name] = scopeDeps;
        if (angular.isArray(deps)) {
          return this.inject(parent, deps, _.uniq(_.values(scopeDeps_injectable)));
        } else if (angular.isObject(deps)) {
          return this.inject(parent, [deps]);
        }
      }
    };
  })();

}).call(this);
